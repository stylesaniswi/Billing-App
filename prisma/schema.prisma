// Update the schema to include Items
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          String    @default("CUSTOMER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  invoices      Invoice[] @relation("CreatedInvoices")
  receivedInvoices Invoice[] @relation("ReceivedInvoices")
  subscriptions Subscription[]
  payments      Payment[]
}

model Profile {
  id            String  @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName  String?
  address       String?
  phone         String?
  taxNumber     String?
  currency      String  @default("NPR")
}

model Invoice {
  id            String    @id @default(cuid())
  number        String    @unique
  createdById   String
  createdBy     User      @relation("CreatedInvoices", fields: [createdById], references: [id])
  customerId    String
  customer      User      @relation("ReceivedInvoices", fields: [customerId], references: [id])
  status        String @default("DRAFT")
  dueDate       DateTime
  items         InvoiceItem[]
  subtotal      Float
  tax           Float
  total         Float
  notes         String?
  noteImages    NoteImage[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  payments      Payment[]
}

model NoteImage {
  id        String   @id @default(cuid())
  url       String   
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  createdAt DateTime @default(now())
}

model InvoiceItem {
  id          String    @id @default(cuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  itemId      String?
  item        Item?     @relation(fields: [itemId], references: [id])
  description String
  quantity    Int
  unitPrice   Float
  total       Float
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
}

model Item {
  id          String    @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  price       Float
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  invoiceItems InvoiceItem[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  color       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  level       Int       @default(0)
  path        String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       InvoiceItem[]
  products    Item[]
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  plan          String
  status        String @default("ACTIVE")
  startDate     DateTime
  endDate       DateTime?
  amount        Float
  billingCycle  String @default("WEEKLY")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payment {
  id            String    @id @default(cuid())
  invoiceId     String
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  amount        Float
  paymentMethod String @default("COD")
  status        String @default("PENDING")
  transactionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Config {
  id            String    @id @default(cuid())
  key           String    @unique
  value         String
  type          String @default("STRING")
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Page {
  id            String    @id @default(cuid())
  slug          String    @unique
  title         String
  content       String
  published     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// enum Role {
//   ADMIN
//   ACCOUNTANT
//   CUSTOMER
// }

// enum InvoiceStatus {
//   DRAFT
//   PENDING
//   PAID
//   OVERDUE
//   CANCELLED
// }

// enum SubscriptionStatus {
//   ACTIVE
//   CANCELLED
//   EXPIRED
//   TRIAL
// }

// enum BillingCycle {
//   WEEKLY
//   MONTHLY
//   YEARLY
// }

// enum PaymentMethod {
//   CREDIT_CARD
//   PAYPAL
//   BANK_TRANSFER
//   STRIPE
// }

// enum PaymentStatus {
//   PENDING
//   COMPLETED
//   FAILED
//   REFUNDED
// }

// enum ConfigType {
//   STRING
//   NUMBER
//   BOOLEAN
//   JSON
// }